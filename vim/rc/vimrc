"---------------------------------------------------------------------------
"Shougo's .vimrc
"---------------------------------------------------------------------------

"---------------------------------------------------------------------------
" Initialize:
"

if &compatible
  set nocompatible
endif

function! s:source_rc(path) abort
  execute 'source' fnameescape(expand('~/.vim/rc/' . a:path))
endfunction

let s:is_windows = has('win16') || has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:is_sudo = $SUDO_USER !=# '' && $USER !=# $SUDO_USER
      \ && $HOME !=# expand('~'.$USER)
      \ && $HOME ==# expand('~'.$SUDO_USER)

function! IsWindows() abort
  return s:is_windows
endfunction

function! IsMac() abort
  return !s:is_windows && !s:is_cygwin
      \ && (has('mac') || has('macunix') || has('gui_macvim') ||
      \   (!executable('xdg-open') &&
      \     system('uname') =~? '^darwin'))
endfunction

command! -nargs=1 SetFixer execute substitute(<q-args>,
      \ '^\s*\<set\%[global]\>',
      \ (has('vim_starting') ? 'set' : 'setglobal'), '')

call s:source_rc('init.rc.vim')

call dein#begin(expand('$CACHE/dein'))

let s:toml_path = '~/.vim/rc/dein.toml'
let s:toml_lazy_path = '~/.vim/rc/deinlazy.toml'
if dein#load_cache([expand('<sfile>'), s:toml_path, s:toml_lazy_path])
  call dein#load_toml(s:toml_path, {'lazy': 0})
  call dein#load_toml(s:toml_lazy_path, {'lazy' : 1})

  let s:vimrc_local = findfile('vimrc_local.vim', '.;')
  if s:vimrc_local !=# ''
    " Load develop version plugins.
    call dein#local(fnamemodify(s:vimrc_local, ':h'), {'frozen': 1},
          \ ['vim*', 'unite-*', 'deoplete-*', 'neco-*', '*.vim', '*.nvim'])
  endif

  call dein#save_cache()
endif

" dein configurations.

call s:source_rc('plugins.rc.vim')

call dein#end()

" Filetype loading is too slow
" filetype plugin indent on

" Enable syntax color.
" syntax enable

if dein#check_install()
  " Installation check.
  call dein#install()
endif

"---------------------------------------------------------------------------
" Encoding:
"

call s:source_rc('encoding.rc.vim')

"---------------------------------------------------------------------------
" Search:
"

" Ignore the case of normal letters.
SetFixer set ignorecase
" If the search pattern contains upper case characters, override ignorecase
" option.
SetFixer set smartcase

" Enable incremental search.
SetFixer set incsearch
" Don't highlight search result.
SetFixer set nohlsearch

" Searches wrap around the end of the file.
SetFixer set wrapscan

"---------------------------------------------------------------------------
" Edit:
"

call s:source_rc('edit.rc.vim')

"---------------------------------------------------------------------------
" View:
"

call s:source_rc('view.rc.vim')

"---------------------------------------------------------------------------
" FileType:
"

call s:source_rc('filetype.rc.vim')

"---------------------------------------------------------------------------
" Mappings:
"

call s:source_rc('mappings.rc.vim')

"---------------------------------------------------------------------------
" Commands:
"

" Display diff with the file.
command! -nargs=1 -complete=file Diff vertical diffsplit <args>
" Disable diff mode.
command! -nargs=0 Undiff setlocal nodiff noscrollbind wrap

"---------------------------------------------------------------------------
" Platform:
"

if has('nvim')
  call s:source_rc('neovim.rc.vim')
endif

if s:is_windows
  call s:source_rc('windows.rc.vim')
else
  call s:source_rc('unix.rc.vim')
endif

if !has('nvim') && has('gui_running')
  call s:source_rc('gui.rc.vim')
endif

"---------------------------------------------------------------------------
" Others:
"

" If true Vim master, use English help file.
SetFixer set helplang& helplang=en,ja

" Default home directory.
let t:cwd = getcwd()

SetFixer set secure

" vim: foldmethod=marker
